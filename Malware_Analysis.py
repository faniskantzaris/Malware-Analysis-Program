import threading
from flask import Flask, request, render_template, redirect, url_for
import yara
import os
import hashlib
import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk

# Create the Flask Application
app = Flask(__name__)
UPLOAD_FOLDER = 'uploads' # Folder that saved the upload files
RULES_FOLDER = 'rules' # Folder that saved the yara rules
os.makedirs(UPLOAD_FOLDER, exist_ok=True) # Folder creation for the files that upload if does not exist

# Saved the Yara rules to the folder
rules_path = os.path.join(RULES_FOLDER, 'my_rules.yar')
os.makedirs(RULES_FOLDER, exist_ok=True)


# Syntax for the yara rules
rules = yara.compile(filepath=rules_path)

# Function for the calculation of SHA-256 hash to a file
def get_file_hash(file_path):
    hash_sha256 = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            hash_sha256.update(byte_block)
    return hash_sha256.hexdigest()

# Function check if the file is malicious
def is_malicious(file_path):
    matches = rules.match(file_path)
    if matches:
        return True

    file_hash = get_file_hash(file_path)
    # Here we add more checks with base of hash file

    return False

# Route to the first page
@app.route('/')
def index():
    return render_template('index.html')

# Route for the file send
@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return 'No file part', 400 # Message that the file does not exist

    file = request.files['file']
    if file.filename == '':
        return 'No selected file', 400 # Message that you do not choose a file

    if file:
        file_path = os.path.join(UPLOAD_FOLDER, file.filename)
        file.save(file_path) # File saved

        matches = rules.match(file_path)
        os.remove(file_path) # File delete after the scan

        if matches:
            return 'The file has malware' # Message if malware find
        else:
            return 'The file is save' # Message if file is clear

    return redirect(url_for('index'))

# Outstanding thread for the flask start
def run_flask():
    app.run(debug=True, use_reloader=False)

class MalwareAnalysisApp:
    def __init__(self, root):
        # The creation of the GUI
        self.root = root
        self.root.title("Malware Analysis Program")
        self.root.attributes('-fullscreen', True)
        self.root.configure(bg='white')

        # Create container frame
        self.container = tk.Frame(self.root, bg='white', bd=5, relief='solid', highlightbackground='#0000ff', highlightcolor='#0000ff', padx=40, pady=60)
        self.container.pack(padx=10, pady=10, expand=True)

        # Add logo
        self.logo = Image.open("static/logo.jpg")  # This is the logo path
        self.logo = self.logo.resize((250, 200), Image.LANCZOS)  # The size of the logo
        self.logo_img = ImageTk.PhotoImage(self.logo)
        self.logo_label = tk.Label(self.container, image=self.logo_img, bg='white') # The label
        self.logo_label.pack(pady=20)

        # Title
        self.title_label = tk.Label(self.container, text="Malware Analysis Program", bg='white', font=("Arial", 24), fg='#052e66')
        self.title_label.pack(pady=10)

        # File upload input
        self.file_input = tk.Entry(self.container, width=40, bg='#333', fg='white', borderwidth=4)
        self.file_input.pack(pady=10)

        # Browse button
        self.browse_button = tk.Button(self.container, text="Upload a file", command=self.browse_file, bg='white', fg='#052e66', padx=20, pady=10)
        self.browse_button.pack()

        # Scan button
        self.scan_button = tk.Button(self.container, text="Scan", command=self.scan_file, bg='white', fg='#052e66', padx=60, pady=10)
        self.scan_button.pack(pady=10)

        # Exit button
        self.exit_button = tk.Button(self.container, text="Exit", command=self.exit_program, bg='white', fg='#24248f', padx=60, pady=10)
        self.exit_button.pack(pady=15)

    def browse_file(self):
        filename = filedialog.askopenfilename(filetypes=[("All Files", "*.*")])
        self.file_input.delete(0, tk.END)  # Clear existing input
        self.file_input.insert(0, filename)  # Insert selected filename

    def scan_file(self):
        file_path = self.file_input.get()
        if file_path:
            self.show_loading_screen()
            self.root.after(3000, lambda: self.show_scan_result(file_path)) # The waiting time for the loading screen

    # Loading screen preset
    def show_loading_screen(self):
        self.loading_window = tk.Toplevel(self.root)
        self.loading_window.title("Scanning...")
        self.loading_window.geometry("300x100")
        self.loading_window.configure(bg='white')
        self.loading_label = tk.Label(self.loading_window, text="Scanning for malware...")
        self.loading_label.pack(expand=True, padx=20, pady=20)

    # The Result screen preset
    def show_scan_result(self, file_path):
        self.loading_window.destroy()
        is_malware = is_malicious(file_path)
        if is_malware:
            result = "Warning! The file has malware"
        else:
            result = "The file is safe"
        messagebox.showinfo("Scan Result", result)

    def exit_program(self):
        self.root.quit()
        os._exit(0)

if __name__ == '__main__':
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.start()
    root = tk.Tk()
    app = MalwareAnalysisApp(root)
    root.mainloop()
